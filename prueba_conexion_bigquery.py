# -*- coding: utf-8 -*-
"""prueba_conexion_Bigquery.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1solphmpvboUDdSueaG3WaqhyYjWrbsY_
"""

# @title Setup
from google.colab import auth
from google.cloud import bigquery
from google.colab import data_table

project = 'tembici-dataviz-operation' # ID del proyecto insertado en función de los resultados de la consulta seleccionados para explorar
location = 'US' # Ubicación insertada en función de los resultados de la consulta seleccionados para explorar
client = bigquery.Client(project=project, location=location)
data_table.enable_dataframe_formatter()
auth.authenticate_user()

# Ejecutar este código mostrará la consulta utilizada para generar su trabajo anterior

job = client.get_job('bquxjob_378d7e5e_18a91d0bc3e') # ID del trabajo insertado en función de los resultados de la consulta seleccionados para explorar
print(job.query)

# Ejecutar este código leerá los resultados de su trabajo anterior

job = client.get_job('bquxjob_378d7e5e_18a91d0bc3e') # ID del trabajo insertado en función de los resultados de la consulta seleccionados para explorar
results = job.to_dataframe()
print(results.head(10))

# Importando las bibliotecas necesarias
import pandas as pd

# Cargando el dataset (Asegúrate de cargar tu archivo CSV en Google Colab)
df = results

# Convertir las columnas de tiempo a formato datetime
df['start_time'] = pd.to_datetime(df['start_time'])
df['end_time'] = pd.to_datetime(df['end_time'])

# Verificar si hay valores faltantes en el dataset
missing_values = df.isnull().sum()
print(f"Valores faltantes en cada columna:\n{missing_values}")

# Contar el número de viajes iniciados en cada estación
station_counts = df['initial_station_name'].value_counts()

# Obtener las 30 estaciones con más viajes iniciados
top_30_stations = station_counts.nlargest(50).index
print(f"Las 30 estaciones con más viajes iniciados son:\n{top_30_stations}")

# Crear un diccionario para almacenar los destinos más comunes para cada estación de inicio
common_destinations = {}

for station in top_30_stations:
    most_common = df[df['initial_station_name'] == station]['final_station_name'].value_counts().idxmax()
    common_destinations[station] = most_common

print(f"Las estaciones de destino más comunes para cada una de las 30 estaciones más activas son:\n{common_destinations}")

# Importar bibliotecas
import pandas as pd
import folium

# Filtrar para solo las 30 estaciones más activas
df_top_30 = df[df['initial_station_name'].isin(top_30_stations)]
df = df_top_30

# Convertir columnas de tiempo a datetime
df['start_time'] = pd.to_datetime(df['start_time'])
df['end_time'] = pd.to_datetime(df['end_time'])

# Contar viajes iniciados en cada estación
station_counts = df['initial_station_name'].value_counts()

# Identificar las 30 estaciones más activas
top_30_stations = station_counts.nlargest(30).index

# Crear un diccionario para guardar destinos más comunes
common_destinations = {}
for station in top_30_stations:
    most_common = df[df['initial_station_name'] == station]['final_station_name'].value_counts().idxmax()
    common_destinations[station] = most_common

# Crear un mapa con Folium
m = folium.Map(location=[4.6482837, -74.0964353], zoom_start=12)

# Añadir marcadores para las 30 estaciones y líneas a sus destinos más comunes
for station, destination in common_destinations.items():
    start_lat = df[df['initial_station_name'] == station]['initial_station_latitude'].iloc[0]
    start_lon = df[df['initial_station_name'] == station]['initial_station_longitude'].iloc[0]

    end_lat = df[df['final_station_name'] == destination]['final_station_latitude'].iloc[0]
    end_lon = df[df['final_station_name'] == destination]['final_station_longitude'].iloc[0]

    folium.Marker([start_lat, start_lon], popup=f'Inicio: {station}').add_to(m)
    folium.Marker([end_lat, end_lon], popup=f'Destino: {destination}', icon=folium.Icon(color='red')).add_to(m)

    folium.PolyLine([(start_lat, start_lon), (end_lat, end_lon)], color='blue').add_to(m)

# Mostrar el mapa
m

import matplotlib.pyplot as plt

# Histograma de horas de inicio de viajes
plt.figure(figsize=(10, 6))
plt.hist(df['start_hour'], bins=range(0, 25), alpha=0.7, color='blue')
plt.title('Distribución de Horas de Inicio de Viajes')
plt.xlabel('Hora del Día')
plt.ylabel('Número de Viajes')
plt.xticks(range(0, 24))
plt.show()

# Gráfico de barras de tipos de bicicletas
bike_type_counts = df['bike_type'].value_counts()
plt.figure(figsize=(8, 5))
bike_type_counts.plot(kind='bar', color='green')
plt.title('Tipos de Bicicletas Utilizadas')
plt.xlabel('Tipo de Bicicleta')
plt.ylabel('Número de Viajes')
plt.show()

import seaborn as sns

# Crear una tabla de contingencia entre estaciones de inicio y fin
pivot_table = pd.crosstab(df['initial_station_name'], df['final_station_name'])

# Filtrar para incluir solo las top 30 estaciones más activas
filtered_pivot = pivot_table.loc[top_30_stations, top_30_stations]

# Gráfico de calor
plt.figure(figsize=(16, 12))
sns.heatmap(filtered_pivot, cmap="YlGnBu", annot=True, fmt='d')
plt.title('Número de Viajes entre Estaciones')
plt.xlabel('Estación Final')
plt.ylabel('Estación Inicial')
plt.show()